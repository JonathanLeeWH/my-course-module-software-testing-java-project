System Test 1

// Sequence Command
Purpose of test case: Test whether second part continue execution if first part encounters an error as indicated in project specification.
Required Inputs: lsa; echo "hello world"
Expected Results: Throws an exception as lsa is not a valid application followed by a new line and also output hello world terminated with a new line.

Purpose of test case: Test whether io streams in paste is properly closed.
Required Inputs: paste 1.txt 2.txt > 3.txt; rm 1.txt 2.txt 3.txt
Where 1.txt 2.txt initially exists
Expected Results: Removes 1.txt 2.txt and 3.txt (which was created after paste command execution)

Purpose of test case: Test IORedirection operator in this case the output redirection operator properly closes the stream
Required Inputs: ls > 1.txt; rm 1.txt
Expected Results: Removes 1.txt which is created after ls command execution.

// Pipe Command
Purpose of test case: check if terminate with exception if an exception occurred in pipe command
Required Inputs: paste A.txt B.txt | grep <valid regex>
Where A.txt B.txt does not exists
Expected Results: Throws an exception.

Purpose of test case: Pipe command allows normal command execution even if streams are not used.
Required Input: ls > 1.txt | rm 1.txt 
Expected Results: Removes 1.txt which is created after ls command execution.

Purpose of test case: Test whether io streams are binded properly when using Pipe command.
Required Inputs: ls | grep <a valid regex>
Where <a valid regex> which would filter out some reasons and leave at least one result in the output.
Expected Results: The filter results of the current files and folder in the current directory.

Required Inputs: sed "s/^/1/" 1.txt | cut -c 1-2 | sort
Where 1.txt exists containing three lines:
A
B
A
Expected Results: Outputs:
1A
1A
1B


// RmApplication
Purpose of test case: Test RmException is thrown when file is not found.
Required Input: rm 1.txt
Where 1.txt is a non existing file.
Expected Results: Throws an RmException ERR_FILE_NOT_FOUND

Purpose of test case: Test remove multiple files
Required Input: rm 1.txt 2.txt
Where 1.txt and 2.txt are existing file.
Expected Results: Removes 1.txt and 2.txt

Purpose of test case: The rest of the input file that exists and valid are removed despite an exception is thrown for one of the input for example one of the input file does not exist.
Required Input: rm 1.txt 2.txt 3.txt
Where 1.txt and 3.txt are existing files and 2.txt does not exist.
Expected Results: Removes 1.txt and 3.txt and throws an RmException ERR_FILE_NOT_FOUND

Purpose of test case: check -r behaves the same as -r -d and -rd. It also removes directories.
Required Input: rm -r hello
Where hello is a non empty directory and also contains empty directory within the hello directory
Expected Results: All files and folders in the hello directory are remove including the hello directory itself.

Purpose of test case: check rm with -d flag only removes files and empty directory
Required Input: rm -d hello 1.txt
Where 1.txt is an existing file and hello is an empty directory.
Expected Results: Removes hello directory and 1.txt

Purpose of test case: check rm with -d flag does not remove non empty directory
Required Input: rm -d hello
Where hello is a non empty directory.
Expected Results: Throws RmException as directory is non empty.

Purpose of test case: check rm supports relative path.
Required Input: rm ../1.txt
Where 1.txt is an existing file in the parent directory of the current directory.
Expected Results: Removes 1.txt

Purpose of test case: Allows removal of directory that is not part of current directory's sub path
Required Input: rm -d ../hello2
Where hello2 is an empty directory not part of current directory sub path.
Expected Results: Removes hello2 directory.

Purpose of test case: check rm supports absolute path.
Required Input: rm <full path of existing file to be deleted>
Expected Results: Removes the existing file specified in the absolute path.

Purpose of test case: checks rm does not allow removal of read only file // Only used when testing other team during hackathon as our assumption assumes file permissions are correct as we provided justification although minimum check is indeed added in our source code to check for these permissions.
Required Input: rm 1.txt
Where 1.txt has read only permissions
Expected Results: Throws RmExpection ERR_NO_PERM

Purpose of test case: checks rm does not allow removal of execute only file // only in unix platform when testing other team during hackathon as our assumption assumes file permissions are correct as we provided justification
Required Input: rm 1.txt
Where 1.txt has execute only permissions
Expected Results: Throws RmExpection ERR_NO_PERM

Purpose of test case: Attempt to remove a directory part of the current directory path (sub path or current path)
Required Input: rm -d <subpath of current directory or current path>
Expected Results: Throws RmException

// cdApplication
Purpose of test case: 